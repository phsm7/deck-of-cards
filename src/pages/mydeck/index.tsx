// import { ChangeEvent, useState } from 'react'
import DefaultTemplate from 'templates/Default'
import useDeckContext from 'hooks/useDeckContext'
import Button from 'components/Button'
import Head from 'next/head'
import Heading from 'components/Heading'
import { useEffect, useState } from 'react'
import { getSessionStorage, setSessionStorage } from 'hooks/useSession'
import Cards from 'components/Cards'
import { useRouter } from 'next/router'
import { DeckService } from 'service/DeckService'
import styled, { css } from "styled-components";


const Content = styled.div`
${({theme}) => css`
  display : flex;
  flex-direction: column;
  gap: 2rem;
  justify-content: center;
  align-items: center;
  width: 100%;
  min-width: 80vw;
  max-width: 90vw;
  background: ${theme.colors.gray};
`}
`

const NumberOfCards = styled.h2`
${({theme}) => css`
  font-size: ${theme.font.sizes.xxlarge};
`}
`

const MaxCards = styled.h3`
${({theme})=> css`
  font-size: ${theme.font.sizes.xxlarge};
  color: ${theme.colors.error};
`}
`

export default function DeckPage() {
  const { 
    cards, 
    setCards, 
    drawNewCard, 
    counterDraw, 
    setCounterDraw
  } = useDeckContext();
  const [name, setName] = useState('');

  const router = useRouter();

  function shuffleCards() {
    const newArray = [...cards]
    const length = newArray.length
  
    for (let start = 0; start < length; start++) {
      const randomPosition = Math.floor((newArray.length - start) * Math.random())
      const randomItem = newArray.splice(randomPosition, 1)
  
      newArray.push(...randomItem)
    }
    setCards(newArray);
    setSessionStorage('cards', newArray);
  }
  
  async function drawCard() {
    try {
      if(counterDraw < 3){
        const res = await drawNewCard();
        const newCard = res.cards;

        var currentArrayOfCards = cards;
        currentArrayOfCards = [
          ...currentArrayOfCards,
          newCard
        ]
        setCards(currentArrayOfCards);

        setSessionStorage('cards', currentArrayOfCards);
        cards.push(newCard);
        setCounterDraw(oldstate => oldstate + 1);
      }
    } catch (error) {      
      router.push('/');
    }
  }

  async function getMyDeck() {
    await DeckService.new();
  }

  useEffect(() => {
    getMyDeck();
  },[])

  useEffect(() => {
    const sessionUserName = getSessionStorage('userName');
    if(!sessionUserName) {
      router.push('/');
      return;
    }
    setName(sessionUserName);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DefaultTemplate>
        <Heading name={name} />
        <Content>
          {counterDraw > 2 && <MaxCards>Máximo de cartas atingido! Tente embaralhar as cartas...</MaxCards>}
          <Cards cards={cards} />

          <NumberOfCards>Você tem {cards.length} cartas no deck</NumberOfCards>

          <Button 
            type="button"
            onClick={() => drawCard()}
            disabled={counterDraw > 2}
            >
            <span>Draw</span>
          </Button>
          
          <Button type="button" onClick={() => shuffleCards()}>
            <span>Shuffle</span>
          </Button>

        </Content>
      </DefaultTemplate>
    </>
  )
}